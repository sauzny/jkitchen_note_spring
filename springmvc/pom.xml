<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.sauzny</groupId>
	<artifactId>springmvc</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>jkitchen_mvc Maven Webapp</name>
	<url>http://maven.apache.org</url>

	<properties>
		<!--文件拷贝时的编码-->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- 编译时的编码 -->
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
		<!-- 常用软件版本 -->
		<jdk>1.8</jdk>
		<junit>4.12</junit>
		<jetty>9.4.6.v20170531</jetty>
		<spring>4.3.10.RELEASE</spring>
		<mybatis.generator>1.3.5</mybatis.generator>
		<jstl>1.2</jstl>
		<servlet>4.0.0</servlet>
		<slf4j>1.7.25</slf4j>
		<logback>1.2.3</logback>
	</properties>

	<dependencies>

		<!-- https://mvnrepository.com/artifact/junit/junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit}</version>
			<scope>test</scope>
		</dependency>

		<!-- lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.16.10</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring}</version>
		</dependency>
		
		<!-- spring 数据库事务 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring}</version>
		</dependency>
		
		<!-- spring 数据库连接 -->
		<dependency>  
            <groupId>org.springframework</groupId>  
            <artifactId>spring-jdbc</artifactId>  
            <version>${spring}</version>  
        </dependency>
        
		 <dependency>  
		   <groupId>org.springframework</groupId>  
		   <artifactId>spring-test</artifactId>  
			<version>${spring}</version>
		 </dependency> 

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring}</version>
		</dependency>

		<!-- spring aop 设置需要的三个包 开始 -->

		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>1.8.10</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.10</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/cglib/cglib -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>3.2.5</version>
		</dependency>
		
		<!-- spring aop 设置需要的三个包 结束 -->
		
		<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
		<dependency>
		    <groupId>commons-fileupload</groupId>
		    <artifactId>commons-fileupload</artifactId>
		    <version>1.3.3</version>
		</dependency>

		<!-- Logging -->
		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>slf4j-api</artifactId>
			<version>${slf4j}</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl -->
		<dependency>
			<groupId>javax.servlet.jsp.jstl</groupId>  
			<artifactId>jstl</artifactId>
			<version>${jstl}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${servlet}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.5</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.7-dmr</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.zaxxer/HikariCP -->
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>2.6.3</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.9.10</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>2.9.10</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.9.10.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api -->
		<!-- note:解决eclipse检测jsp中的jstl表达式报错的问题 -->
		<!-- provided 此jar包不需要编译打包  -->
		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>javax.servlet.jsp-api</artifactId>
		    <version>2.3.3</version>
		    <scope>provided</scope>
		</dependency>


	</dependencies>

	<build>

		<finalName>jkitchen_mvc</finalName>

		<plugins>

			<!-- mybatis-generator -->
			<plugin>
				<groupId>org.mybatis.generator</groupId>
				<artifactId>mybatis-generator-maven-plugin</artifactId>
				<version>${mybatis.generator}</version>
				<configuration>
					<configurationFile>src/main/resources/mybatis/generatorConfig.xml</configurationFile>
					<overwrite>true</overwrite>
				</configuration>
			</plugin>

			<!-- servlet 容器 -->
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty}</version>
				<configuration>
					<httpConnector>
						<!-- 访问端口,默认8080 -->
						<port>8081</port>
					</httpConnector>
					<stopKey>shutdown</stopKey>
					<stopPort>9966</stopPort>
					<!-- 自动热部署 -->
					<!-- <scanIntervalSeconds>2</scanIntervalSeconds> -->
					<!-- 手动重加载  可选值 ：[automatic|manual] -->
					<reload>manual</reload>
					<!-- dumpOnStart 默认值为 false，如果设为 true，jetty 在启动时会把当前服务进程的内存信息输出到控制台中，但这并不会保存到文件中。 -->
					<dumpOnStart>false</dumpOnStart>
					<webApp>
						<!--  -->
						<contextPath>/mvc</contextPath>
						<!-- 项目的静态资源文件目录默认是 src/main/webapp，如果静态资源目录有多个，或者不在默认的 src/main/webapp 目录下，可做如下配置： -->
						<!-- <resourceBases> <resourceBase>${project.basedir}/src/main/webapp</resourceBase> 
							<resourceBase>${project.basedir}/commons</resourceBase> </resourceBases> -->
					</webApp>
					<!-- 访问日志 -->
					<!-- 
					<requestLog implementation="org.eclipse.jetty.server.NCSARequestLog">
						<filename>target/access-yyyy_mm_dd.log</filename>
						<filenameDateFormat>yyyy_MM_dd</filenameDateFormat>
						<logDateFormat>yyyy-MM-dd HH:mm:ss</logDateFormat>
						<logTimeZone>GMT+8:00</logTimeZone>
						<append>true</append>
						<logServer>true</logServer>
						<retainDays>120</retainDays>
						<logCookies>true</logCookies>
					</requestLog>
					 -->
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${jdk}</source> <!-- 源代码使用的开发版本 -->
					<target>${jdk}</target> <!-- 需要生成的目标class文件的编译版本 -->
					<!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->

					<!-- 这下面的是可选项 -->
					<encoding>UTF-8</encoding>
					<meminitial>128m</meminitial>
					<maxmem>512m</maxmem>
					<fork>true</fork> <!-- fork is enable,用于明确表示编译版本配置的可用 -->
					<compilerVersion>1.3</compilerVersion>

					<!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
					<!-- <compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument> -->

				</configuration>
			</plugin>


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.2</version>
				<configuration>
					<!-- 指定编码格式，否则在DOS下运行mvn命令时当发生文件资源copy时将使用系统默认使用GBK编码 -->
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

		</plugins>

	</build>

</project>
